import{_ as s,c as a,o as i,a5 as n}from"./chunks/framework.BuWuHeYF.js";const p="/assets/text2sparql.DnsRuaLB.png",y=JSON.parse('{"title":"지식그래프에 자연어 질의하기 - GraphSparqlQAChain","description":"지식그래프에 자연어로 질의할 수 있는 chain인 GraphSparqlQAChain을 소개합니다.","frontmatter":{"title":"지식그래프에 자연어 질의하기 - GraphSparqlQAChain","description":"지식그래프에 자연어로 질의할 수 있는 chain인 GraphSparqlQAChain을 소개합니다.","keywords":"\\"LangChain,GraphSparqlQAChain, SPARQL\\"","url":"LLM/langchain/sparqlqachat.html","img":"https://an-jieun.github.io/static/img/gsqa.png","tags":"Langchain","lastmod":"2025-03-10T00:00:00.000Z","sitemap":{"changefreq":"daily","priority":0.4},"head":[["script",{"type":"application/ld+json"},"{\\n  \\"@context\\":\\"http://schema.org\\",\\n  \\"@type\\":\\"BlogPosting\\",\\n  \\"mainEntityOfPage\\" : {\\n    \\"@type\\" : \\"WebPage\\",\\n    \\"@id\\" : \\"https://an-jieun.github.io/contentsLLM/langchain/sparqlqachat.html\\"\\n  },\\n  \\"image\\" : {\\n    \\"@type\\" : \\"ImageObject\\",\\n    \\"url\\" : \\"https://an-jieun.github.io/static/img/gsqa.png\\",\\n    \\"width\\" : \\"800px\\",\\n    \\"height\\" : \\"800px\\"\\n  },\\n  \\"name\\":\\"지식그래프에 자연어 질의하기 - GraphSparqlQAChain\\",\\n  \\"url\\" : \\"https://an-jieun.github.io/contents/LLM/langchain/sparqlqachat.html\\",\\n  \\"headline\\":\\"지식그래프에 자연어로 질의할 수 있는 chain인 GraphSparqlQAChain을 소개합니다.\\",\\n  \\"description\\":\\"지식그래프에 자연어로 질의할 수 있는 chain인 GraphSparqlQAChain을 소개합니다.\\",\\n  \\"keywords\\" : [\\"LangChain,GraphSparqlQAChain, SPARQL\\"],\\n  \\"inLanguage\\":\\"ko\\",\\n  \\"author\\" : {\\n    \\"@type\\" : \\"Person\\",\\n    \\"name\\" : \\"Jieun\\",\\n    \\"email\\" : \\"aje20010827@gmail.com\\"\\n    }\\n  },\\n}"],["meta",{"property":"og:title","content":"지식그래프에 자연어 질의하기 - GraphSparqlQAChain"}],["meta",{"property":"og:description","content":"지식그래프에 자연어로 질의할 수 있는 chain인 GraphSparqlQAChain을 소개합니다."}],["meta",{"property":"og:url","content":"https://an-jieun.github.io/"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://an-jieun.github.io/static/img/gsqa.png"}],["meta",{"property":"og:site_name","content":"전자두뇌만들기"}],["meta",{"property":"og:locale","content":"ko_KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:title","content":"지식그래프에 자연어 질의하기 - GraphSparqlQAChain"}],["meta",{"name":"twitter:description","content":"지식그래프에 자연어로 질의할 수 있는 chain인 GraphSparqlQAChain을 소개합니다."}],["meta",{"name":"twitter:image","content":"https://an-jieun.github.io/static/img/gsqa.png"}],["meta",{"property":"@context","content":"http://schema.org"}],["meta",{"property":"@type","content":"TechArticle"}],["meta",{"property":"name","content":"지식그래프에 자연어 질의하기 - GraphSparqlQAChain"}],["meta",{"property":"url","content":"https://an-jieun.github.io/contents/LLM/langchain/sparqlqachat.html"}],["meta",{"property":"description","content":"지식그래프에 자연어로 질의할 수 있는 chain인 GraphSparqlQAChain을 소개합니다."}],["meta",{"property":"keywords","content":"LangChain,GraphSparqlQAChain, SPARQL"}],["meta",{"property":"version","content":"1.0"}],["meta",{"property":"inLanguage","content":"ko"}],["meta",{"property":"technicalAudience","content":"developer, DBA, Web Developer"}],["meta",{"property":"proficiencyLevel","content":"beginner"}],["meta",{"property":"author","content":"Jieun"}]]},"headers":[],"relativePath":"contents/LLM/langchain/sparqlqachat.md","filePath":"contents/LLM/langchain/sparqlqachat.md","lastUpdated":1741610877000}'),t={name:"contents/LLM/langchain/sparqlqachat.md"},e=n('<h1 id="지식그래프에-자연어-질의하기-graphsparqlqachain" tabindex="-1">지식그래프에 자연어 질의하기 - GraphSparqlQAChain <a class="header-anchor" href="#지식그래프에-자연어-질의하기-graphsparqlqachain" aria-label="Permalink to &quot;지식그래프에 자연어 질의하기 - GraphSparqlQAChain&quot;">​</a></h1><p>GraphDB를 사용해 보면, &#39;Talk to your graph&#39;이라는 기능을 시범적으로 서비스한다. 말 그대로 <code>자연어-&gt; SPARQL쿼리-&gt; 쿼리 실행 결과</code>과정으로, SPARQL 쿼리의 입력 없이 자연어로 직접 그래프를 탐색 할 수 있도록 하는 기능이다.</p><p><img src="'+p+`" alt="talk to your graph"></p><p>만약에 RAG chain을 구성하는데 지식그래프를 탐색한 결과를 사용하려면 어떻게 해야 할까?</p><p>LangChain에서는 chain 상에서 그래프를 이용할 수 있는 다양한 패키지를 제공한다. graphg qa chain을 지원하는 외부 패키지들은 <code>langchain_community.chains.graph_qa</code>에서 제공된다. GraphSparqlQAChain도 그중 하나로, RDF 형식의 지식그래프를 지원하는 RDFLib 클래스와 호환되는 그래프 QA chain 패키지이다.</p><h2 id="사용법" tabindex="-1">사용법 <a class="header-anchor" href="#사용법" aria-label="Permalink to &quot;사용법&quot;">​</a></h2><p>준비물은 탐색을 진행할 지식그래프의 파일(.ttl 형식의 트리플 파일이나 해당 형식의 데이터가 존재하는 웹 URL), 그리고 탐색에 사용할 LLM 모델의 API 키(또는 모델 자체)가 필요하다.</p><p>본문에서 사용한 langchain_community 의 버전은 0.3.19 이다. 업데이트된 경우 공식문서를 꼭 확인해야 한다.</p><h3 id="_0-library-import" tabindex="-1">0. Library Import <a class="header-anchor" href="#_0-library-import" aria-label="Permalink to &quot;0. Library Import&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_community.chains.graph_qa.sparql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GraphSparqlQAChain</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_community.graphs.rdf_graph </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RdfGraph</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatOpenAI </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 또는 다른 모델도 가능</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_core.prompts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptTemplate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>여기서는 API 키가 이미 <code>.env</code>에 정의되어 있다는 전제로 진행한다.</p><h3 id="_1-graph-define" tabindex="-1">1. Graph Define <a class="header-anchor" href="#_1-graph-define" aria-label="Permalink to &quot;1. Graph Define&quot;">​</a></h3><p>탐색이 진행될 그래프를 <code>RdfGraph</code> 타입의 객체로 선언한다.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RdfGraph(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    source_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;.ttl 파일 경로 입력&gt;.ttl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 또는 rdf 형식의 데이터가 존재하는 url</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    standard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rdf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 그래프 데이터가 어떤 표준을 따르고 있는지 (rdf, rdfs, owl 중 선택)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    local_copy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.ttl&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 그래프 데이터에 수정이 존재할 경우 수정된 파일을 저장할 경로</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>그래프를 잘 가져왔는지 확인해보자</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph.get_schema</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>에러가 뜨지 않고 그래프에 정의된 IRI들이 잘 나오면 성공적으로 로드해온 것이다.</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&#39;In the following, each IRI is followed by the local name and optionally its description in parentheses. \\nThe RDF graph supports the following node types:~~~&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-prompt-define" tabindex="-1">2. Prompt Define <a class="header-anchor" href="#_2-prompt-define" aria-label="Permalink to &quot;2. Prompt Define&quot;">​</a></h3><p>GraphSparqlQAChain에서는 기본적인 생성자로 QA를 진행하는 체인(<code>qa_chain</code>),쿼리를 선택하도록 하는 체인(<code>sparql_select_chain</code>), 그래프를 업데이트 하는 체인(<code>sparql_update_chain</code>), 질의문을 통해 적절한 SPARQL 쿼리 유형을 결정하도록 하는 체인(<code>sparql_intent_chain</code>)을 매개 변수로 정의해야 한다. 하지만, 이를 실제로 LLMChain 타입으로 구현하는 것은 복잡하고 번거롭다.</p><p>이에 GraphSparqlQAChain에서는 프롬프트만으로 각각의 체인들을 자동으로 생성해주는 내장 함수 <code>.from_llm()</code>을 지원한다. <code>from_llm</code>에서는 앞서 언급한 각각의 기능을 수행하도록 지시하는 프롬프트들을 매개변수로 정의한다.</p><p>프롬프트는 아래 예시와 같이 입력할 수 있다. 필요에 따라 아래 예시를 변경해 사용할 수 있지만, 그냥 그대로 복붙에서 사용해도 꽤 만족스러운 결과를 얻을 수 있다.</p><details class="details custom-block"><summary>Prompt 예시</summary><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">qa_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptTemplate(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    input_variables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;context&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prompt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Task: Generate a natural language response from the results of a SPARQL query.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;You are an assistant that creates well-written and human-understandable answers.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;The information part contains the information provided, which you can use to construct an answer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;The information provided is authoritative, you must never doubt it or try to use your internal knowledge to correct it.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Make your response sound like the information is coming from an AI assistant, but don&#39;t add any information.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Information:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n{context}\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Question: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{prompt}\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Helpful Answer:&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sparql_select_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptTemplate(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    input_variables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prompt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;schema&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Task: Generate a SPARQL SELECT statement for querying a graph database.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;For instance, to find all email addresses of John Doe, the following query would be suitable:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;SELECT ?email</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;WHERE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ← 여기를 \`{{\` 로 변경</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;    ?person foaf:name </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">John Doe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;    ?person foaf:mbox ?email .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ← 여기도 \`}}\` 로 변경</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Instructions:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Use only the node types and properties provided in the schema.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Do not use any node types and properties that are not explicitly provided.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Include all necessary prefixes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Schema:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n{schema}\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;The question is:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n{prompt}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sparql_update_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptTemplate(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    input_variables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prompt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;schema&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Task: Generate a SPARQL UPDATE statement for updating a graph database.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;For instance, to add &#39;jane.doe@foo.bar&#39; as a new email address for Jane Doe, the following query would be suitable:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;INSERT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;    ?person foaf:mbox &lt;mailto:jane.doe@foo.bar&gt; .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;WHERE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;    ?person foaf:name </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Jane Doe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Instructions:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Schema:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n{schema}\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;The information to be inserted is:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n{prompt}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sparql_intent_query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptTemplate(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    input_variables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prompt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Task: Identify the intent of a prompt and return the appropriate SPARQL query type.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;You are an assistant that distinguishes different types of prompts and returns the corresponding SPARQL query types.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Consider only the following query types:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;* SELECT: this query type corresponds to questions</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;* UPDATE: this query type corresponds to all requests for deleting, inserting, or changing triples</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Note: Be as concise as possible.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Do not include any explanations or apologies in your responses.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Do not respond to any questions that ask for anything else than for you to identify a SPARQL query type.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Do not include any unnecessary whitespaces or any text except the query type, i.e., either return &#39;SELECT&#39; or &#39;UPDATE&#39;.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;The prompt is:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n{prompt}\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;Helpful Answer:&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div></details><h3 id="_3-create-graphsparqlqachain" tabindex="-1">3. Create GraphSparqlQAChain <a class="header-anchor" href="#_3-create-graphsparqlqachain" aria-label="Permalink to &quot;3. Create GraphSparqlQAChain&quot;">​</a></h3><p>이제 chain을 생성해보도록 하자. llm의 temperature는 가급적 0으로 설정하는 것을 권장한다. 반드시 <code>allow_dangerous_requests</code>를 True로 설정해야 한다.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g_chain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  GraphSparqlQAChain.from_llm(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    llm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChatOpenAI(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">temperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    qa_prompt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">qa_prompt,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    graph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    sparql_select_prompt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sparql_select_prompt,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    sparql_update_prompt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sparql_update_prompt,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    sparql_intent_query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sparql_intent_query,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    allow_dangerous_requests</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="이제-사용해보기" tabindex="-1">이제 사용해보기 <a class="header-anchor" href="#이제-사용해보기" aria-label="Permalink to &quot;이제 사용해보기&quot;">​</a></h2><p>기본적인 chain 클래스들처럼 <code>invoke</code>를 사용해서 질의를 입력할 수 있다.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g_chain.invoke({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; 그래프에 질의할 내용 &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="참고자료" tabindex="-1">참고자료 <a class="header-anchor" href="#참고자료" aria-label="Permalink to &quot;참고자료&quot;">​</a></h2><ul><li><a href="https://api.python.langchain.com/en/latest/community/graphs/langchain_community.graphs.rdf_graph.RdfGraph.html#langchain_community.graphs.rdf_graph.RdfGraph" target="_blank" rel="noreferrer">Langchain API References - RdfGraph</a></li><li><a href="https://api.python.langchain.com/en/latest/community/chains/langchain_community.chains.graph_qa.sparql.GraphSparqlQAChain.html#langchain_community.chains.graph_qa.sparql.GraphSparqlQAChain.sparql_intent_chain" target="_blank" rel="noreferrer">Langchain API References - GraphSparqlQAChain</a></li></ul>`,31),l=[e];function h(r,k,o,d,F,c){return i(),a("div",null,l)}const u=s(t,[["render",h]]);export{y as __pageData,u as default};
